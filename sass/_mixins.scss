// Managing Responsive Breakpoints with Sass
// @link http://www.sitepoint.com/managing-responsive-breakpoints-sass/

// Usage: 
// @include min-width(small) { ... }
// @include min-width(medium) { ... }
// @include min-width(large) { ... }

// $breakpoints: (
//   'small'  : ( min-width: 360px ),
//   'medium' : ( min-width: 600px ),
//   'large'  : ( min-width: 960px ),
//   'xlarge'  : ( min-width: 1200px )
// );
//   
// @mixin min-width($name) {
//   // If the key exists in the map
//   @if map-has-key($breakpoints, $name) {
//     // Prints a media query based on the value
//     @media #{inspect(map-get($breakpoints, $name))} {
//       @content;
//     }
//   }
//  
//   // If the key doesn't exist in the map
//   @else {
//     @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
//         + "Please make sure it is defined in `$breakpoints` map.";
//   }
// }
// 
// 
// @mixin clearfix {
// 	// adapted from http://nicolasgallagher.com/micro-clearfix-hack/
// 	
// 	&:before {
// 		content: " ";
// 		display: table;
// 	}
// 	
// 	&:after {
// 		clear: both;
// 		content: " ";
// 		display: table;
// 	}
// 	
// 	*zoom: 1;
// }


// applied to the ul element
@mixin inline-list($margin-direction: left) {
	list-style: none;
	margin: 0 auto;
	
	> li {
		display: inline-block;
		text-align: left;
		list-style: none;
	//	margin-#{$margin-direction}: $small-spacing;
		
		> * { display: block; }
	}
}


// For adding font icons to elements using CSS pseudo-elements
// http://jaydenseric.com/blog/fun-with-sass-and-font-icons
@mixin icon($position: before, $icon: false, $styles: true) {
    @if $position == both {
        $position: 'before, &:after';
    }
    // Either a :before or :after pseudo-element, or both, defaulting to :before
    &:#{$position} {
        @if $icon {
            // A particular icon has been specified
            content: "#{map-get($icons, $icon)}";
        }
        @if $styles {
            // Supportive icon styles required
            speak: none;
            font-style: normal;
            font-weight: normal;
            font-family: $font-family-icon;
        }
        // Include any extra rules supplied for the pseudo-element
        @content;
    }
}


// http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
%visuallyhidden {
	position: absolute;
	overflow: hidden;
	clip: rect(0 0 0 0);
	margin: -1px;
	padding: 0;
	width: 1px;
	height: 1px;
	border: 0;
}
